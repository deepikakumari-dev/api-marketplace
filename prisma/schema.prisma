datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  membersOfOrgs UserOrganization[]

  organization Organization[]
  apis API[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationToken")
}

model Organization {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  image       String?
  creatorId   String  @db.ObjectId
  creator     User    @relation(fields: [creatorId], references: [id])
  members UserOrganization[]

  @@map("organization")
}

model API {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  slug             String   @unique
  shortDescription String
  longDescription  String
  logo             String?
  categoryId       String   @db.ObjectId
  category         Category @relation(fields: [categoryId], references: [id])
  ownerId          String   @db.ObjectId
  owner            User     @relation(fields: [ownerId], references: [id])

  baseUrl          String
  pricingPlanIds   String[]
  endpoints        APIEndpoint[]

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("apis")
}

model APIEndpoint {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  apiId          String   @db.ObjectId
  api            API      @relation(fields: [apiId], references: [id], onDelete: Cascade)

  name           String
  path           String
  method         String
  description    String?
  exampleRequest Json?
  exampleResponse Json?

  authRequired   Boolean  @default(true)
  rateLimit      Int?     
  visibility     String   @default("public")
  version        String   @default("v1")

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("api_endpoints")
}


model Category {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  apis        API[]
  @@map("category")
}

model UserOrganization {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @db.ObjectId
  organizationId  String        @db.ObjectId
  role            String       @default("member")

  user            User          @relation(fields: [userId], references: [id])
  organization    Organization  @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId])
  @@map("user_organizations")
}

